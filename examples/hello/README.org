#+PROPERTY: header-args:bash :results output :exports both
# #+PROPERTY: header-args:C++ :exports code
# #+PROPERTY: header-args:makefile :exports code
* main.cpp
#+begin_src C++ :tangle main.cpp
#include <arrayfire.h>
// Generate random data, sum and print the result.
int main(void)
{
    // Generate 10,000 random values
    af::array a = af::randu(10000);

    // Sum the values and copy the result to the CPU:
    double sum = af::sum<float>(a);

    printf("sum: %g\n", sum);
    return 0;
}
#+end_src

* Makefile
#+begin_src makefile :tangle Makefile
LIBS=-lafcpu
LIB_PATHS=-L/opt/arrayfire/lib
INCLUDES=-I/opt/arrayfire/include
CC=g++ $(COMPILER_OPTIONS)
COMPILER_OPTIONS=-std=c++11 -g

all: main.cpp Makefile
	$(CC) main.cpp -o test $(INCLUDES) $(LIBS) $(LIB_PATHS)
#+end_src

#+begin_src bash
make
#+end_src

#+RESULTS:
: g++ -std=c++11 -g main.cpp -o test -I/opt/arrayfire/include -lafcpu -L/opt/arrayfire/lib

While ~make~ succeeds, running the resulting executable with ~./test~ fails:
#+begin_example
dyld: Library not loaded: @rpath/libafcpu.3.dylib
  Referenced from: /Users/ashroyer-admin/repo/fun/jgpu/examples/hello/./test
  Reason: image not found
#+end_example

According to [[https://stackoverflow.com/a/54072747/2037637][this]], a possible fix is to update homebrew:
#+begin_src sh
brew update
brew upgrade
brew cleanup  # not sure if this step is necessary
#+end_src

The above suggestion did not solve the issue for me, but [[https://stackoverflow.com/a/17704255/2037637][this suggestion]] did, at least temporarily:
#+begin_src sh
install_name_tool -change @rpath/libafcpu.3.dylib /opt/arrayfire/lib/libafcpu.3.dylib test
#+end_src

#+RESULTS:

After running the above command, the ~test~ program runs without error:
#+begin_src bash
./test
#+end_src

#+RESULTS:
: sum: 4979.24

* Updated Makefile
This incorporates the ~install_name_tool~ hack.
#+begin_src makefile :tangle Makefile
LIBS=-lafcpu
LIB_PATHS=-L/opt/arrayfire/lib
INCLUDES=-I/opt/arrayfire/include
CC=g++ $(COMPILER_OPTIONS)
COMPILER_OPTIONS=-std=c++11 -g

OUTFILE=a.out

all: main.cpp Makefile
	$(CC) main.cpp -o $(OUTFILE) $(INCLUDES) $(LIBS) $(LIB_PATHS)
	install_name_tool -change @rpath/libafcpu.3.dylib /opt/arrayfire/lib/libafcpu.3.dylib $(OUTFILE)

test: all
	./$(OUTFILE)
#+end_src

#+begin_src bash :results output
make test
#+end_src

#+RESULTS:
: g++ -std=c++11 -g main.cpp -o a.out -I/opt/arrayfire/include -lafcpu -L/opt/arrayfire/lib
: install_name_tool -change @rpath/libafcpu.3.dylib /opt/arrayfire/lib/libafcpu.3.dylib a.out
: ./a.out
: sum: 4979.24

* Summary
For now, getting a "hello ArrayFire" program to run on MacOS was not completely smooth, but at least answers to my questions were readily found.
Will try Linux next to compare.
