* Using ArrayFire's C API

#+begin_src c :tangle main.c
#include <arrayfire.h>
#include <stdio.h>
int main(){
    dim_t dims[2] = { 10, 10 };
    af_array x = 0, y = 0;
    af_err err = af_randn(&x, 2, dims, f32); // check for error using err
    err = af_randn(&y, 2, dims, f32); // check for error using err

    // Now if we want to floor a multiplication of x with 100, it would like the following
    af_array factor = 0;
    err = af_constant(&factor, 1000, 2, dims, f32); // check for error using err
    af_array floored_x, scaled_x = 0;
    err = af_mul(&scaled_x, factor, x, false); // check for error using err
    err = af_floor(&floored_x, scaled_x); // check for error using err
    /* af_print(floored_x); */
    printf("hi world\n");
    return 0;
}
#+end_src

makefile:
#+begin_src makefile :tangle Makefile
LIBS = -lafcpu
LIB_PATHS = -L/opt/arrayfire/lib
INCLUDES = -I/opt/arrayfire/include
COMPILER_OPTIONS = -std=c11 -g
CC = gcc $(COMPILER_OPTIONS)

OUTFILE=a.out
clean:
	rm -f a.out
	rm -rf a.out.dSYM

all: main.c
	$(CC) main.c -o $(OUTFILE) $(INCLUDES) $(LIBS) $(LIB_PATHS)
	install_name_tool -change @rpath/libafcpu.3.dylib /opt/arrayfire/lib/libafcpu.3.dylib $(OUTFILE)

test: clean all
	./$(OUTFILE)
#+end_src

#+begin_src bash :results output
make test
#+end_src

#+RESULTS:
: rm -f a.out
: rm -rf a.out.dSYM
: gcc -std=c11 -g main.c -o a.out -I/opt/arrayfire/include -lafcpu -L/opt/arrayfire/lib
: install_name_tool -change @rpath/libafcpu.3.dylib /opt/arrayfire/lib/libafcpu.3.dylib a.out
: ./a.out
: hi world
