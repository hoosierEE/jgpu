#+SETUPFILE: ~/org/blog.org
* matmul in ArrayFire
One notable difference between ArrayFire and J is that ArrayFire uses column-major ordering.
So if you take the first six integers and ask ArrayFire to order them in a 2x3 matrix, you'll get this result:

#+begin_example
1 3 5
2 4 6
#+end_example

Meanwhile in J if you ask the same question, you would get this result instead:
#+begin_example
1 2 3
4 5 6
#+end_example

This has consequences for matrix multiplication.
If your internal representation is row-major, you get this result:
#+begin_src j
   (1+i.2 3)+/ .*(1+i.3 4) NB. row major
38 44  50  56
83 98 113 128
#+end_src

It is possible to mimic column-major ordering, using the transpose of the (reversed shape)-reshape of the original matrix:
#+begin_src j
   cm =: [:|:(|.@$)$,
   (cm 1+i.2 3)+/ .*(cm 1+i.3 4)
22 49  76 103
28 64 100 136
#+end_src

The same procedure can be used in ArrayFire to convert its inputs to row-major ordering.
#+begin_src C++ :tangle src/mm.cpp :exports code
// src/mm.cpp
#include <arrayfire.h>
int main(){
    // ArrayFire uses column-major ordering
    af::dim4 d1(2,3);
    af::array m1 = af::moddims(af::seq(1,2*3), d1);
    af::dim4 d2(3,4);
    af::array m2 = af::moddims(af::seq(1,3*4), d2);
    af::array m3 = af::matmul(m1,m2);

    // convert to row-major order: reshape(flatten(transpose(x)))
    af_print(m1);
    af_print(af::flat(m1.T()));
    af_print(m3);

    // but it is possible to "fake" row-major ordering
    af::dim4 r1(3,2);
    af::array t1 = af::moddims(af::seq(1,2*3), r1);
    af_print(t1);

    af::dim4 r2(4,3);
    af::array t2 = af::moddims(af::seq(1,3*4), r2);
    af_print(t2);
    // af::array m4 = af::matmulTT(t2,t1).T();
    af::array m4 = af::matmulTT(t1,t2);
    af_print(m4);
}
#+end_src

#+RESULTS:

#+begin_src bash :results output :exports both
rm -f matmul.out
g++ -std=c++11 -g src/mm.cpp -o matmul.out -I/opt/arrayfire/include -lafcpu -L/opt/arrayfire/lib64
./matmul.out
#+end_src

#+RESULTS:
#+begin_example
m1
[2 3 1 1]
    1.0000     3.0000     5.0000
    2.0000     4.0000     6.0000

af::flat(m1.T())
[6 1 1 1]
    1.0000
    3.0000
    5.0000
    2.0000
    4.0000
    6.0000

m3
[2 4 1 1]
   22.0000    49.0000    76.0000   103.0000
   28.0000    64.0000   100.0000   136.0000

t1
[3 2 1 1]
    1.0000     4.0000
    2.0000     5.0000
    3.0000     6.0000

t2
[4 3 1 1]
    1.0000     5.0000     9.0000
    2.0000     6.0000    10.0000
    3.0000     7.0000    11.0000
    4.0000     8.0000    12.0000

m4
[2 4 1 1]
   38.0000    44.0000    50.0000    56.0000
   83.0000    98.0000   113.0000   128.0000

#+end_example
